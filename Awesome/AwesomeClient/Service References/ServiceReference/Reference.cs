//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AwesomeClient.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/createReservation", ReplyAction="http://tempuri.org/IService/createReservationResponse")]
        string createReservation(string name, bool taken, int seatCounts, int movieId, int[] movieSeatIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/createReservation", ReplyAction="http://tempuri.org/IService/createReservationResponse")]
        System.Threading.Tasks.Task<string> createReservationAsync(string name, bool taken, int seatCounts, int movieId, int[] movieSeatIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/createMovie", ReplyAction="http://tempuri.org/IService/createMovieResponse")]
        string createMovie(string title, System.DateTime dateAndTime, System.TimeSpan Duration, int roomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/createMovie", ReplyAction="http://tempuri.org/IService/createMovieResponse")]
        System.Threading.Tasks.Task<string> createMovieAsync(string title, System.DateTime dateAndTime, System.TimeSpan Duration, int roomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/createRoom", ReplyAction="http://tempuri.org/IService/createRoomResponse")]
        string createRoom(int cols, int rows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/createRoom", ReplyAction="http://tempuri.org/IService/createRoomResponse")]
        System.Threading.Tasks.Task<string> createRoomAsync(int cols, int rows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/createTicket", ReplyAction="http://tempuri.org/IService/createTicketResponse")]
        string createTicket(decimal standard, int reservationId, int discountId, int col, int row);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/createTicket", ReplyAction="http://tempuri.org/IService/createTicketResponse")]
        System.Threading.Tasks.Task<string> createTicketAsync(decimal standard, int reservationId, int discountId, int col, int row);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/createDiscount", ReplyAction="http://tempuri.org/IService/createDiscountResponse")]
        string createDiscount(decimal dPercent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/createDiscount", ReplyAction="http://tempuri.org/IService/createDiscountResponse")]
        System.Threading.Tasks.Task<string> createDiscountAsync(decimal dPercent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateReservation", ReplyAction="http://tempuri.org/IService/updateReservationResponse")]
        string updateReservation(int reservationId, string name, bool taken, System.DateTime dateOfReserve, int seatCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateReservation", ReplyAction="http://tempuri.org/IService/updateReservationResponse")]
        System.Threading.Tasks.Task<string> updateReservationAsync(int reservationId, string name, bool taken, System.DateTime dateOfReserve, int seatCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateMovie", ReplyAction="http://tempuri.org/IService/updateMovieResponse")]
        string updateMovie(int movieId, string title, System.DateTime dateAndTime, System.TimeSpan Duration, int roomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateMovie", ReplyAction="http://tempuri.org/IService/updateMovieResponse")]
        System.Threading.Tasks.Task<string> updateMovieAsync(int movieId, string title, System.DateTime dateAndTime, System.TimeSpan Duration, int roomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateRoom", ReplyAction="http://tempuri.org/IService/updateRoomResponse")]
        string updateRoom(int roomId, int cols, int rows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateRoom", ReplyAction="http://tempuri.org/IService/updateRoomResponse")]
        System.Threading.Tasks.Task<string> updateRoomAsync(int roomId, int cols, int rows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateTicket", ReplyAction="http://tempuri.org/IService/updateTicketResponse")]
        string updateTicket(int ticketId, decimal standard, int reservationId, int discountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateTicket", ReplyAction="http://tempuri.org/IService/updateTicketResponse")]
        System.Threading.Tasks.Task<string> updateTicketAsync(int ticketId, decimal standard, int reservationId, int discountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateSeat", ReplyAction="http://tempuri.org/IService/updateSeatResponse")]
        string updateSeat(int seatId, int col, int row, bool usable, System.DateTime dateAndTime, int roomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateSeat", ReplyAction="http://tempuri.org/IService/updateSeatResponse")]
        System.Threading.Tasks.Task<string> updateSeatAsync(int seatId, int col, int row, bool usable, System.DateTime dateAndTime, int roomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateDiscount", ReplyAction="http://tempuri.org/IService/updateDiscountResponse")]
        string updateDiscount(int discountId, decimal dPercent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/updateDiscount", ReplyAction="http://tempuri.org/IService/updateDiscountResponse")]
        System.Threading.Tasks.Task<string> updateDiscountAsync(int discountId, decimal dPercent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getReservation", ReplyAction="http://tempuri.org/IService/getReservationResponse")]
        AwesomeServer.Reservation[] getReservation(int reservationId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getReservation", ReplyAction="http://tempuri.org/IService/getReservationResponse")]
        System.Threading.Tasks.Task<AwesomeServer.Reservation[]> getReservationAsync(int reservationId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getMovie", ReplyAction="http://tempuri.org/IService/getMovieResponse")]
        AwesomeServer.Movie[] getMovie(int movieId, string title, int roomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getMovie", ReplyAction="http://tempuri.org/IService/getMovieResponse")]
        System.Threading.Tasks.Task<AwesomeServer.Movie[]> getMovieAsync(int movieId, string title, int roomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getRoom", ReplyAction="http://tempuri.org/IService/getRoomResponse")]
        AwesomeServer.Room getRoom(int roomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getRoom", ReplyAction="http://tempuri.org/IService/getRoomResponse")]
        System.Threading.Tasks.Task<AwesomeServer.Room> getRoomAsync(int roomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAllRooms", ReplyAction="http://tempuri.org/IService/getAllRoomsResponse")]
        AwesomeServer.Room[] getAllRooms();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAllRooms", ReplyAction="http://tempuri.org/IService/getAllRoomsResponse")]
        System.Threading.Tasks.Task<AwesomeServer.Room[]> getAllRoomsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getTicket", ReplyAction="http://tempuri.org/IService/getTicketResponse")]
        AwesomeServer.Ticket[] getTicket(int ticketId, int reservationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getTicket", ReplyAction="http://tempuri.org/IService/getTicketResponse")]
        System.Threading.Tasks.Task<AwesomeServer.Ticket[]> getTicketAsync(int ticketId, int reservationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getSeat", ReplyAction="http://tempuri.org/IService/getSeatResponse")]
        AwesomeServer.Seat[] getSeat(int seatId, int roomId, int col, int row, int movieId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getSeat", ReplyAction="http://tempuri.org/IService/getSeatResponse")]
        System.Threading.Tasks.Task<AwesomeServer.Seat[]> getSeatAsync(int seatId, int roomId, int col, int row, int movieId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getDiscount", ReplyAction="http://tempuri.org/IService/getDiscountResponse")]
        AwesomeServer.Discount getDiscount(System.Nullable<int> discountId, decimal dPercent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getDiscount", ReplyAction="http://tempuri.org/IService/getDiscountResponse")]
        System.Threading.Tasks.Task<AwesomeServer.Discount> getDiscountAsync(System.Nullable<int> discountId, decimal dPercent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/removeReservation", ReplyAction="http://tempuri.org/IService/removeReservationResponse")]
        string removeReservation(int reservationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/removeReservation", ReplyAction="http://tempuri.org/IService/removeReservationResponse")]
        System.Threading.Tasks.Task<string> removeReservationAsync(int reservationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/removeMovie", ReplyAction="http://tempuri.org/IService/removeMovieResponse")]
        string removeMovie(int movieId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/removeMovie", ReplyAction="http://tempuri.org/IService/removeMovieResponse")]
        System.Threading.Tasks.Task<string> removeMovieAsync(int movieId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/removeRoom", ReplyAction="http://tempuri.org/IService/removeRoomResponse")]
        string removeRoom(int roomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/removeRoom", ReplyAction="http://tempuri.org/IService/removeRoomResponse")]
        System.Threading.Tasks.Task<string> removeRoomAsync(int roomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/removeTicket", ReplyAction="http://tempuri.org/IService/removeTicketResponse")]
        string removeTicket(int ticketId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/removeTicket", ReplyAction="http://tempuri.org/IService/removeTicketResponse")]
        System.Threading.Tasks.Task<string> removeTicketAsync(int ticketId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/removeDiscount", ReplyAction="http://tempuri.org/IService/removeDiscountResponse")]
        string removeDiscount(int discountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/removeDiscount", ReplyAction="http://tempuri.org/IService/removeDiscountResponse")]
        System.Threading.Tasks.Task<string> removeDiscountAsync(int discountId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : AwesomeClient.ServiceReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<AwesomeClient.ServiceReference.IService>, AwesomeClient.ServiceReference.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string createReservation(string name, bool taken, int seatCounts, int movieId, int[] movieSeatIds) {
            return base.Channel.createReservation(name, taken, seatCounts, movieId, movieSeatIds);
        }
        
        public System.Threading.Tasks.Task<string> createReservationAsync(string name, bool taken, int seatCounts, int movieId, int[] movieSeatIds) {
            return base.Channel.createReservationAsync(name, taken, seatCounts, movieId, movieSeatIds);
        }
        
        public string createMovie(string title, System.DateTime dateAndTime, System.TimeSpan Duration, int roomId) {
            return base.Channel.createMovie(title, dateAndTime, Duration, roomId);
        }
        
        public System.Threading.Tasks.Task<string> createMovieAsync(string title, System.DateTime dateAndTime, System.TimeSpan Duration, int roomId) {
            return base.Channel.createMovieAsync(title, dateAndTime, Duration, roomId);
        }
        
        public string createRoom(int cols, int rows) {
            return base.Channel.createRoom(cols, rows);
        }
        
        public System.Threading.Tasks.Task<string> createRoomAsync(int cols, int rows) {
            return base.Channel.createRoomAsync(cols, rows);
        }
        
        public string createTicket(decimal standard, int reservationId, int discountId, int col, int row) {
            return base.Channel.createTicket(standard, reservationId, discountId, col, row);
        }
        
        public System.Threading.Tasks.Task<string> createTicketAsync(decimal standard, int reservationId, int discountId, int col, int row) {
            return base.Channel.createTicketAsync(standard, reservationId, discountId, col, row);
        }
        
        public string createDiscount(decimal dPercent) {
            return base.Channel.createDiscount(dPercent);
        }
        
        public System.Threading.Tasks.Task<string> createDiscountAsync(decimal dPercent) {
            return base.Channel.createDiscountAsync(dPercent);
        }
        
        public string updateReservation(int reservationId, string name, bool taken, System.DateTime dateOfReserve, int seatCount) {
            return base.Channel.updateReservation(reservationId, name, taken, dateOfReserve, seatCount);
        }
        
        public System.Threading.Tasks.Task<string> updateReservationAsync(int reservationId, string name, bool taken, System.DateTime dateOfReserve, int seatCount) {
            return base.Channel.updateReservationAsync(reservationId, name, taken, dateOfReserve, seatCount);
        }
        
        public string updateMovie(int movieId, string title, System.DateTime dateAndTime, System.TimeSpan Duration, int roomId) {
            return base.Channel.updateMovie(movieId, title, dateAndTime, Duration, roomId);
        }
        
        public System.Threading.Tasks.Task<string> updateMovieAsync(int movieId, string title, System.DateTime dateAndTime, System.TimeSpan Duration, int roomId) {
            return base.Channel.updateMovieAsync(movieId, title, dateAndTime, Duration, roomId);
        }
        
        public string updateRoom(int roomId, int cols, int rows) {
            return base.Channel.updateRoom(roomId, cols, rows);
        }
        
        public System.Threading.Tasks.Task<string> updateRoomAsync(int roomId, int cols, int rows) {
            return base.Channel.updateRoomAsync(roomId, cols, rows);
        }
        
        public string updateTicket(int ticketId, decimal standard, int reservationId, int discountId) {
            return base.Channel.updateTicket(ticketId, standard, reservationId, discountId);
        }
        
        public System.Threading.Tasks.Task<string> updateTicketAsync(int ticketId, decimal standard, int reservationId, int discountId) {
            return base.Channel.updateTicketAsync(ticketId, standard, reservationId, discountId);
        }
        
        public string updateSeat(int seatId, int col, int row, bool usable, System.DateTime dateAndTime, int roomId) {
            return base.Channel.updateSeat(seatId, col, row, usable, dateAndTime, roomId);
        }
        
        public System.Threading.Tasks.Task<string> updateSeatAsync(int seatId, int col, int row, bool usable, System.DateTime dateAndTime, int roomId) {
            return base.Channel.updateSeatAsync(seatId, col, row, usable, dateAndTime, roomId);
        }
        
        public string updateDiscount(int discountId, decimal dPercent) {
            return base.Channel.updateDiscount(discountId, dPercent);
        }
        
        public System.Threading.Tasks.Task<string> updateDiscountAsync(int discountId, decimal dPercent) {
            return base.Channel.updateDiscountAsync(discountId, dPercent);
        }
        
        public AwesomeServer.Reservation[] getReservation(int reservationId, string name) {
            return base.Channel.getReservation(reservationId, name);
        }
        
        public System.Threading.Tasks.Task<AwesomeServer.Reservation[]> getReservationAsync(int reservationId, string name) {
            return base.Channel.getReservationAsync(reservationId, name);
        }
        
        public AwesomeServer.Movie[] getMovie(int movieId, string title, int roomId) {
            return base.Channel.getMovie(movieId, title, roomId);
        }
        
        public System.Threading.Tasks.Task<AwesomeServer.Movie[]> getMovieAsync(int movieId, string title, int roomId) {
            return base.Channel.getMovieAsync(movieId, title, roomId);
        }
        
        public AwesomeServer.Room getRoom(int roomId) {
            return base.Channel.getRoom(roomId);
        }
        
        public System.Threading.Tasks.Task<AwesomeServer.Room> getRoomAsync(int roomId) {
            return base.Channel.getRoomAsync(roomId);
        }
        
        public AwesomeServer.Room[] getAllRooms() {
            return base.Channel.getAllRooms();
        }
        
        public System.Threading.Tasks.Task<AwesomeServer.Room[]> getAllRoomsAsync() {
            return base.Channel.getAllRoomsAsync();
        }
        
        public AwesomeServer.Ticket[] getTicket(int ticketId, int reservationId) {
            return base.Channel.getTicket(ticketId, reservationId);
        }
        
        public System.Threading.Tasks.Task<AwesomeServer.Ticket[]> getTicketAsync(int ticketId, int reservationId) {
            return base.Channel.getTicketAsync(ticketId, reservationId);
        }
        
        public AwesomeServer.Seat[] getSeat(int seatId, int roomId, int col, int row, int movieId) {
            return base.Channel.getSeat(seatId, roomId, col, row, movieId);
        }
        
        public System.Threading.Tasks.Task<AwesomeServer.Seat[]> getSeatAsync(int seatId, int roomId, int col, int row, int movieId) {
            return base.Channel.getSeatAsync(seatId, roomId, col, row, movieId);
        }
        
        public AwesomeServer.Discount getDiscount(System.Nullable<int> discountId, decimal dPercent) {
            return base.Channel.getDiscount(discountId, dPercent);
        }
        
        public System.Threading.Tasks.Task<AwesomeServer.Discount> getDiscountAsync(System.Nullable<int> discountId, decimal dPercent) {
            return base.Channel.getDiscountAsync(discountId, dPercent);
        }
        
        public string removeReservation(int reservationId) {
            return base.Channel.removeReservation(reservationId);
        }
        
        public System.Threading.Tasks.Task<string> removeReservationAsync(int reservationId) {
            return base.Channel.removeReservationAsync(reservationId);
        }
        
        public string removeMovie(int movieId) {
            return base.Channel.removeMovie(movieId);
        }
        
        public System.Threading.Tasks.Task<string> removeMovieAsync(int movieId) {
            return base.Channel.removeMovieAsync(movieId);
        }
        
        public string removeRoom(int roomId) {
            return base.Channel.removeRoom(roomId);
        }
        
        public System.Threading.Tasks.Task<string> removeRoomAsync(int roomId) {
            return base.Channel.removeRoomAsync(roomId);
        }
        
        public string removeTicket(int ticketId) {
            return base.Channel.removeTicket(ticketId);
        }
        
        public System.Threading.Tasks.Task<string> removeTicketAsync(int ticketId) {
            return base.Channel.removeTicketAsync(ticketId);
        }
        
        public string removeDiscount(int discountId) {
            return base.Channel.removeDiscount(discountId);
        }
        
        public System.Threading.Tasks.Task<string> removeDiscountAsync(int discountId) {
            return base.Channel.removeDiscountAsync(discountId);
        }
    }
}
